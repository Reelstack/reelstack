import { RankingService } from '../services/api/ranking';

/**
 * Exemplo de uso do algoritmo de cascata para ranking de filmes
 * 
 * Este exemplo demonstra como o RankingService implementa um sistema
 * de pontua√ß√£o baseado em m√∫ltiplos crit√©rios com pesos normalizados.
 */

async function exemploRanking() {
    console.log('üé¨ Iniciando exemplo do algoritmo de cascata...\n');
    
    const rankingService = new RankingService();
    
    try {
        // Exemplo 1: Top 10 filmes de todos os tempos
        console.log('üìä Calculando Top 10 de todos os tempos...');
        const top10AllTime = await rankingService.getTop10AllTime();
        
        console.log(`‚úÖ Encontrados ${top10AllTime.totalCount} filmes`);
        console.log(`üïí √öltima atualiza√ß√£o: ${top10AllTime.lastUpdated}\n`);
        
        // Exibe os 3 primeiros filmes como exemplo
        top10AllTime.movies.slice(0, 3).forEach((ranking, index) => {
            const movie = ranking.movie;
            console.log(`üèÜ #${ranking.ranking} - ${movie.Title} (${movie.Year})`);
            console.log(`   Score: ${(ranking.score * 100).toFixed(1)}%`);
            console.log(`   IMDB: ${movie.imdbRating}/10 (${(ranking.criteria.imdbRating * 100).toFixed(1)}%)`);
            console.log(`   Votos: ${movie.imdbVotes.replace(/\B(?=(\d{3})+(?!\d))/g, ',')} (${(ranking.criteria.imdbVotes * 100).toFixed(1)}%)`);
            console.log(`   Ano: ${movie.Year} (${(ranking.criteria.year * 100).toFixed(1)}%)`);
            console.log(`   Dura√ß√£o: ${movie.Runtime} (${(ranking.criteria.runtime * 100).toFixed(1)}%)`);
            console.log(`   Bilheteria: ${movie.BoxOffice} (${(ranking.criteria.boxOffice * 100).toFixed(1)}%)`);
            console.log('');
        });
        
        // Exemplo 2: Top 10 por g√™nero
        console.log('üé≠ Calculando Top 10 de filmes de a√ß√£o...');
        const top10Action = await rankingService.getTop10ByGenre('action');
        
        console.log(`‚úÖ Encontrados ${top10Action.totalCount} filmes de a√ß√£o`);
        console.log(`üèÜ Melhor filme de a√ß√£o: ${top10Action.movies[0].movie.Title} (Score: ${(top10Action.movies[0].score * 100).toFixed(1)}%)\n`);
        
        // Exemplo 3: Lista customizada
        console.log('üìù Calculando ranking de lista customizada...');
        const customMovies = [
            'The Shawshank Redemption',
            'The Godfather',
            'Pulp Fiction',
            'Fight Club',
            'Inception'
        ];
        
        const customRanking = await rankingService.getTop10Movies(customMovies);
        console.log(`‚úÖ Ranking calculado para ${customRanking.totalCount} filmes customizados`);
        console.log(`üèÜ Melhor da lista: ${customRanking.movies[0].movie.Title} (Score: ${(customRanking.movies[0].score * 100).toFixed(1)}%)\n`);
        
        // Exemplo 4: An√°lise detalhada de um filme
        console.log('üîç An√°lise detalhada do melhor filme...');
        const bestMovie = top10AllTime.movies[0];
        console.log(`üìä ${bestMovie.movie.Title} - An√°lise completa:`);
        console.log(`   Score Final: ${(bestMovie.score * 100).toFixed(1)}%`);
        console.log('');
        console.log('   Crit√©rios individuais:');
        console.log(`   ‚Ä¢ IMDB Rating (35%): ${bestMovie.movie.imdbRating}/10 ‚Üí ${(bestMovie.criteria.imdbRating * 100).toFixed(1)}%`);
        console.log(`   ‚Ä¢ N√∫mero de Votos (25%): ${bestMovie.movie.imdbVotes.replace(/\B(?=(\d{3})+(?!\d))/g, ',')} ‚Üí ${(bestMovie.criteria.imdbVotes * 100).toFixed(1)}%`);
        console.log(`   ‚Ä¢ Ano de Lan√ßamento (15%): ${bestMovie.movie.Year} ‚Üí ${(bestMovie.criteria.year * 100).toFixed(1)}%`);
        console.log(`   ‚Ä¢ Dura√ß√£o (10%): ${bestMovie.movie.Runtime} ‚Üí ${(bestMovie.criteria.runtime * 100).toFixed(1)}%`);
        console.log(`   ‚Ä¢ Bilheteria (15%): ${bestMovie.movie.BoxOffice} ‚Üí ${(bestMovie.criteria.boxOffice * 100).toFixed(1)}%`);
        console.log('');
        
        // C√°lculo manual para verifica√ß√£o
        const manualScore = (
            bestMovie.criteria.imdbRating * 0.35 +
            bestMovie.criteria.imdbVotes * 0.25 +
            bestMovie.criteria.year * 0.15 +
            bestMovie.criteria.runtime * 0.10 +
            bestMovie.criteria.boxOffice * 0.15
        );
        
        console.log(`   C√°lculo manual: ${(manualScore * 100).toFixed(1)}%`);
        console.log(`   Score do algoritmo: ${(bestMovie.score * 100).toFixed(1)}%`);
        console.log(`   ‚úÖ Diferen√ßa: ${Math.abs(manualScore - bestMovie.score) < 0.001 ? 'Correto' : 'Incorreto'}`);
        
    } catch (error) {
        console.error('‚ùå Erro durante o exemplo:', error);
    }
}

/**
 * Exemplo de como o algoritmo de cascata funciona internamente
 */
function explicarAlgoritmoCascata() {
    console.log('\nüß† EXPLICA√á√ÉO DO ALGORITMO DE CASCATA\n');
    console.log('O algoritmo de cascata funciona em 3 etapas principais:\n');
    
    console.log('1Ô∏è‚É£ NORMALIZA√á√ÉO DOS CRIT√âRIOS:');
    console.log('   ‚Ä¢ IMDB Rating: 0-10 ‚Üí 0-1 (divis√£o por 10)');
    console.log('   ‚Ä¢ Votos: 0-2M ‚Üí 0-1 (normaliza√ß√£o logar√≠tmica)');
    console.log('   ‚Ä¢ Ano: 1900-2024 ‚Üí 0-1 (com b√¥nus para filmes recentes)');
    console.log('   ‚Ä¢ Dura√ß√£o: 0-‚àû ‚Üí 0-1 (ideal: 90-150 min)');
    console.log('   ‚Ä¢ Bilheteria: 0-3B ‚Üí 0-1 (normaliza√ß√£o logar√≠tmica)\n');
    
    console.log('2Ô∏è‚É£ APLICA√á√ÉO DOS PESOS:');
    console.log('   ‚Ä¢ IMDB Rating: 35% (mais importante)');
    console.log('   ‚Ä¢ N√∫mero de Votos: 25% (popularidade)');
    console.log('   ‚Ä¢ Ano: 15% (relev√¢ncia temporal)');
    console.log('   ‚Ä¢ Dura√ß√£o: 10% (qualidade narrativa)');
    console.log('   ‚Ä¢ Bilheteria: 15% (sucesso comercial)\n');
    
    console.log('3Ô∏è‚É£ C√ÅLCULO DO SCORE FINAL:');
    console.log('   Score = Œ£(Crit√©rio √ó Peso)');
    console.log('   Exemplo: (0.9 √ó 0.35) + (0.8 √ó 0.25) + (0.7 √ó 0.15) + (0.9 √ó 0.10) + (0.6 √ó 0.15) = 0.815\n');
    
    console.log('üéØ VANTAGENS DO ALGORITMO:');
    console.log('   ‚Ä¢ Balanceia m√∫ltiplos crit√©rios de qualidade');
    console.log('   ‚Ä¢ Evita que um √∫nico crit√©rio domine o ranking');
    console.log('   ‚Ä¢ Usa normaliza√ß√£o para comparar valores diferentes');
    console.log('   ‚Ä¢ Permite ajuste fino dos pesos conforme necessidade');
}

// Executa os exemplos se o arquivo for executado diretamente
if (typeof window === 'undefined') {
    // Ambiente Node.js
    exemploRanking().then(() => {
        explicarAlgoritmoCascata();
    });
}

export { exemploRanking, explicarAlgoritmoCascata };
